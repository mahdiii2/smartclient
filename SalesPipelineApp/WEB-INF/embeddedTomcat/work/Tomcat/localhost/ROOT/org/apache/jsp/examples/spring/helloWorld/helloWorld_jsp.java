/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.42
 * Generated at: 2025-06-19 04:49:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.examples.spring.helloWorld;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class helloWorld_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/isomorphic_core_rpc.jar", Long.valueOf(1750169604742L));
    _jspx_dependants.put("jar:file:/C:/Users/User/Downloads/SmartClient_v141p_2025-06-14_Evaluation/SmartClient_v141p_2025-06-14_Evaluation/smartclientSDK/WEB-INF/lib/isomorphic_core_rpc.jar!/META-INF/isc.tld", Long.valueOf(1749892736000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fisomorphic_005floadISC_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fisomorphic_005floadDMIStubs_0026_005fname_005fnobody;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fisomorphic_005floadISC_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fisomorphic_005floadDMIStubs_0026_005fname_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fisomorphic_005floadISC_005fnobody.release();
    _005fjspx_005ftagPool_005fisomorphic_005floadDMIStubs_0026_005fname_005fnobody.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!--------------------------------------------------------------------\n");
      out.write("	SmartClient SDK\n");
      out.write("	Spring Hello World Example\n");
      out.write("\n");
      out.write("	Copyright 2001 and beyond Isomorphic Software, Inc. (www.isomorphic.com)\n");
      out.write("---------------------------------------------------------------------->\n");
      out.write("\n");
      out.write("\n");
      out.write("<HTML><HEAD>\n");
      out.write("	");
      if (_jspx_meth_isomorphic_005floadISC_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("\n");
      out.write("<STYLE>\n");
      out.write("	.headerText {font-family:Verdana,Helvetica,sans-serif; font-size:12px; font-weight:bold; color:black;}\n");
      out.write("</STYLE><TITLE>\n");
      out.write("	Isomorphic SmartClient Spring Hello World Example\n");
      out.write("</TITLE></HEAD><BODY bgcolor=lightblue>\n");
      out.write("\n");
      out.write("This example demonstrates a simple SmartClient RPC (Remote Procedure Call) DMI (Direct Method\n");
      out.write("Invocation) integration with the Spring Framework.  This works just like the simple\n");
      out.write("Client/Server Communication example \"Get Timestamp\" - available here: \n");
      out.write("<a href='../../server_integration/generic_rpc_operations/getTimeStamp.jsp'>Get Timestamp\n");
      out.write("Example</a>.  The only difference is that this example invokes a method on a Spring-managed bean.\n");
      out.write("<p>\n");
      out.write("To see all the code/configuration involved, take a look at these files in the SDK:\n");
      out.write("<ul>\n");
      out.write("<li>/WEB-INF/web.xml - contains registration of the Spring initialization servlet - this is\n");
      out.write("standard spring configuration.\n");
      out.write("<li>/WEB-INF/applicationContext.xml - contains the configuration of the HelloWorld bean that\n");
      out.write("we call into via DMI here.\n");
      out.write("<li>/examples/spring/helloWorld/helloWorld.jsp - the source to this page - containts the\n");
      out.write("client-side code.\n");
      out.write("<li>/examples/spring/helloWorld/HelloWorld.java - the implementation of\n");
      out.write("com.isomorphic.examples.spring.HelloWorld bean that's registered in applicationContext.xml.\n");
      out.write("<li>/shared/app/springExamples.app.xml - SmartClient configuration file that registers\n");
      out.write("HelloWorld as a DMI-invocable bean and lists the methods that may be called on this bean from\n");
      out.write("the client (for security reasons).\n");
      out.write("</ul>\n");
      out.write("See also the DMI documentation in the SmartClient reference (search for 'DMI').\n");
      out.write("\n");
      out.write("<SCRIPT>\n");
      out.write("// This loads the DMI stubs from the /shared/app/springExamples.app.xml file.  This allows\n");
      out.write("// us to call helloWorld.sayHello() below.\n");
      if (_jspx_meth_isomorphic_005floadDMIStubs_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("\n");
      out.write("isc.DynamicForm.create({\n");
      out.write("    top: 300,\n");
      out.write("    ID: \"helloForm\",\n");
      out.write("    fields: [\n");
      out.write("        {name: \"name\", title: \"Your name\"},\n");
      out.write("        {name: \"sayHello\", type: \"button\", title: \"Say Hello!\", \n");
      out.write("         click: function () {\n");
      out.write("             // DMI protocol - the ServerObject declared in the .app.xml is available here as a\n");
      out.write("             // global because we loaded it via the 'loadDMIStubs' tag, and all methods\n");
      out.write("             // described in the <visibleMethods> block of the ServerObject can be called\n");
      out.write("             // directly.  The second argument is an optional callback - in this case we take\n");
      out.write("             // the server response and simply update the contents of the label declared below\n");
      out.write("             // with whatever the server returns.\n");
      out.write("             helloWorld.sayHello(helloForm.getValue('name'), \"helloLabel.setContents(data)\");\n");
      out.write("         }\n");
      out.write("        }\n");
      out.write("    ]\n");
      out.write("});\n");
      out.write("\n");
      out.write("Label.create({\n");
      out.write("    ID: \"helloLabel\",\n");
      out.write("    top: 400,\n");
      out.write("    width: 400,\n");
      out.write("	contents:\"Server response goes here...\"\n");
      out.write("});\n");
      out.write("\n");
      out.write("</SCRIPT></BODY>\n");
      out.write("</HTML>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_isomorphic_005floadISC_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  isomorphic:loadISC
    com.isomorphic.taglib.LoadISCTag _jspx_th_isomorphic_005floadISC_005f0 = (com.isomorphic.taglib.LoadISCTag) _005fjspx_005ftagPool_005fisomorphic_005floadISC_005fnobody.get(com.isomorphic.taglib.LoadISCTag.class);
    _jspx_th_isomorphic_005floadISC_005f0.setPageContext(_jspx_page_context);
    _jspx_th_isomorphic_005floadISC_005f0.setParent(null);
    int _jspx_eval_isomorphic_005floadISC_005f0 = _jspx_th_isomorphic_005floadISC_005f0.doStartTag();
    if (_jspx_th_isomorphic_005floadISC_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fisomorphic_005floadISC_005fnobody.reuse(_jspx_th_isomorphic_005floadISC_005f0);
    return false;
  }

  private boolean _jspx_meth_isomorphic_005floadDMIStubs_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  isomorphic:loadDMIStubs
    com.isomorphic.taglib.LoadDMIStubsTag _jspx_th_isomorphic_005floadDMIStubs_005f0 = (com.isomorphic.taglib.LoadDMIStubsTag) _005fjspx_005ftagPool_005fisomorphic_005floadDMIStubs_0026_005fname_005fnobody.get(com.isomorphic.taglib.LoadDMIStubsTag.class);
    _jspx_th_isomorphic_005floadDMIStubs_005f0.setPageContext(_jspx_page_context);
    _jspx_th_isomorphic_005floadDMIStubs_005f0.setParent(null);
    // /examples/spring/helloWorld/helloWorld.jsp(43,0) name = name type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_isomorphic_005floadDMIStubs_005f0.setName("springExamples");
    int _jspx_eval_isomorphic_005floadDMIStubs_005f0 = _jspx_th_isomorphic_005floadDMIStubs_005f0.doStartTag();
    if (_jspx_th_isomorphic_005floadDMIStubs_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fisomorphic_005floadDMIStubs_0026_005fname_005fnobody.reuse(_jspx_th_isomorphic_005floadDMIStubs_005f0);
    return false;
  }
}
