/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.42
 * Generated at: 2025-06-22 19:11:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.SalesPipelineApp.tools;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;
import com.isomorphic.rpc.*;
import com.isomorphic.servlet.*;
import com.isomorphic.datasource.*;
import java.lang.reflect.Method;

public final class adminConsoleOperations_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(10);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("com.isomorphic.servlet");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("com.isomorphic.datasource");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_packages.add("com.isomorphic.rpc");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("java.lang.reflect.Method");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


// This file allows the execution of "Builtin RPCs" which are unsafe in
// environments where users are not trusted. If Reify is deployed in
// production, this file should be protected by an authentication system and/or
// restricted to adminstrator users.


      out.write('\n');


// this code sets the response contentType, so do this first before any JSP output is flushed
// to the response stream.  Some (arguaby broken) app servers may fail to let us set the
// contentType here even though it's the very first line of code - which is ok
// because the browser will still execute the code as JS - it just may carp about it.
if (Boolean.valueOf(request.getParameter("checkPresent"))) {
    response.setContentType("application/javascript");

    out.print("window.adminConsolePresent=true;");
    return;
}

RequestContext requestContext = RequestContext.instance(this, request, response, out);
RPCManager rpc;
try {
    rpc = new RPCManager(request, response, out);
    // Enable access to FilesystemDataSource
    rpc.enableAllDataSources();

    // and otherwise protected DataSources exposed to / used by the AdminConsole
    request.setAttribute("adminConsoleOperationsEnabled", true);
    request.setAttribute("schedulerOperationsEnabled", true);

} catch (ClientMustResubmitException e) { 
    return; 
}

for(Iterator i = rpc.getRequests().iterator(); i.hasNext();) {
    Object req = i.next();
    try {
	    if(req instanceof RPCRequest) {
	        RPCRequest rpcRequest = (RPCRequest)req;
            // See reference documentation on "Tools Deployment" for more information on tool security.
            //
            // To limit access to an explicit set of BuiltinRPC methods, uncomment the following lines:
            //     String[] allowedBuiltIns = {"getDefinedDatabases", "getDefinedDataSources", "importDataSources",
            //         "downloadClientContent", "setDefaultDB", "testDB", "saveDBConfig", "discoverJNDIDatabases"};
            //     String appID = rpcRequest.getAppID();
            //     if ("isc_builtin".equals(appID)) {
            //         String methodName = rpcRequest.getMethodName();
            //         if (!Arrays.asList(allowedBuiltIns).contains(methodName)) {
            //             throw new Exception("Attempt to execte RPC DMI BuiltIn '" + methodName
            //                  +"' DENIED.");
            //         }
            //     }

	        RPCResponse rpcResponse;
	        try {
	            // To limit access to BuiltIn methods defined in server.properties, replace
	            // the line below with:
	            //     rpcResponse = RPCDMI.execute(rpcRequest, rpc, rpcRequest.context);
	            rpcResponse = RPCDMI.execute(rpcRequest, rpc, requestContext, true);
	            if (rpcResponse == null) rpcResponse = rpcRequest.execute();
	        } catch (Exception e) {
                rpcResponse = IDACall._handleRPCRequestError(rpcRequest, rpc, requestContext, e);
	        }
	
	        rpc.send(rpcRequest, rpcResponse);
	    } else {
	        DSRequest dsRequest = (DSRequest)req;
            DSResponse dsResponse = null;
            try { 
                dsResponse = dsRequest.execute();
            } catch (Exception e) {
                dsResponse = IDACall._handleDSRequestError(dsRequest, rpc, requestContext, e);
            }
            rpc.send(dsRequest, dsResponse);
	    }
    } catch (Throwable t) {
        ServletTools.handleServletError(response, "Error in RPCManager.completeResponse()", t);
    }
} // for(requests)


      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
