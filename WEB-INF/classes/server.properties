# The webRoot directory:
# the directory that the servlet engine regards as the place where applications 
# that use the servlet engine should be installed.  Generally, it is safe to leave
# this at the default setting of __AUTODETECT__.  When the SmartClient server is
# started, it logs a message to stdout telling you the autodetected path to your
# webRoot.  If this path is not your actual webRoot, then you'll want to override
# this config parameter here.
#
# Valid values: 
#
# 1. Absolute path to the webRoot directory
#
# 2. Special token:  __AUTODETECT__
#    When this token is used, SmartClient attempts to auto-detect the webRoot using
#    standard servlet APIs.  This may or may not work - depending on your
#    container type and deployment type.  For example, WAR/EAR deployments
#    on some containers never make it to disk, and so the container refuses
#    to provide the webRoot path.
#  
#    If SmartClient cannnot detect the webRoot, it sets the webRoot to
#    __USE_CONTAINER__ (see below).
#
# 3.  Special token: __USE_CONTAINER__
#     When this token is used, SmartClient uses standard servet APIs for accessing
#     filesystem resources.  This is slower than direct file access and, since
#     the servlet APIs provide no mechanism for writing to disk, means that some
#     development tools like the FileAssembler will not work.
#
webRoot:__AUTODETECT__

# if you've moved the isomorphic directory from its default location in webRoot,
# set the root-relative path to it here
#
# For example, if in your deployment the 'isomorphic' dir is in /foo/bar, then set
# then you'll need to set this to foo/bar/isomorphic
isomorphicPathRootRelative:isomorphic

# -------------- PICK DATABASE TO USE --------------------
#
# The SmartClient SDK ships with examples that use a database as the persistence
# layer.  By default, the SDK uses a built-in version of HSQLDB, but you can 
# specify a different database to use here.

# which database do you want to use?  HSQLDB is enabled by default.
sql.defaultDatabase:HSQLDB
# Publish the JDBC endpoint for the defaultDatabase via JNDI at the specified path for use by
# other frameworks such as Spring, Hibernate, etc.
# Note that we do not use the java:comp or java:comp/env prefix because that
# subtree is read-only on Tomcat (and possibly other containers) due to security
# considerations
sql.defaultDatabase.jndi.publish.path:isomorphic/jdbc/defaultDatabase

# If you want to use Mysql instead, uncomment the following line
# and comment all other sql.defaultDatabase definitions
#sql.defaultDatabase: Mysql

# If you want to use Oracle instead, uncomment the following line
# and comment all other sql.defaultDatabase definitions
#sql.defaultDatabase: Oracle

# If you want to use Postgres instead, uncomment the following line
# and comment all other sql.defaultDatabase definitions
#sql.defaultDatabase: PostgreSQL

# If you want to use DB2 instead, uncomment the following line
# and comment all other sql.defaultDatabase definitions
#sql.defaultDatabase: DB2

# If you want to use Microsoft SQL Server instead, uncomment the following
# line and comment all other sql.defaultDatabase definitions
#sql.defaultDatabase: SQLServer

# If you want to use Firebird instead, uncomment the following line
# and comment all other sql.defaultDatabase definitions
#sql.defaultDatabase: Firebird

# If you want to use Informix instead, uncomment the following line
# and comment all other sql.defaultDatabase definitions
#sql.defaultDatabase: Informix

# If you want to use a different type of database, there is a generic 
# SQL92 driver that you may be able to use.  Scan the client documentation
# for "sqlSettings" and "sqlDataSource" for details of this driver,
# including its limitations

# -------------- SETTINGS FOR HSQLDB --------------------

sql.HSQLDB.database.type:hsqldb
sql.HSQLDB.interface.type:driverManager

sql.HSQLDB.driver:org.hsqldb.jdbcDriver
sql.HSQLDB.driver.url:jdbc:hsqldb:file:$webRoot/WEB-INF/db/hsqldb/isomorphic

# -------------- SETTINGS FOR MYSQL --------------------

# These are the settings for use with the Mysql database.  If you have 
# just done a fresh install of MySQL on the same machine where you are 
# running your servlet engine, the values provided below will probably 
# just work on most platforms.

# Configuration for Mysql Connector/J
sql.Mysql.database.type:mysql
sql.Mysql.database.ansiMode:false

# Driver settings
sql.Mysql.interface.type:dataSource
sql.Mysql.driver:org.gjt.mm.mysql.jdbc2.optional.MysqlDataSource
sql.Mysql.driver.driverName:mysql

# hostname and port where the database server is installed
sql.Mysql.driver.serverName:localhost
sql.Mysql.driver.portNumber:3306

# name of the database to use
sql.Mysql.driver.databaseName:isomorphic

# username and password that can create and modify tables in that database
# this user must have the following privileges for the system to function
# properly: create/alter/drop table; insert/update/replace/delete rows.
sql.Mysql.driver.user:root
sql.Mysql.driver.password:


# -------------- SETTINGS FOR ORACLE --------------------

# These are example settings for use with the Oracle database.
sql.Oracle.database.type:oracle

# hostname and port where the database server is installed
sql.Oracle.driver.serverName:localhost
sql.Oracle.driver.portNumber:1521

# Driver settings
sql.Oracle.interface.type:driverManager
sql.Oracle.driver:oracle.jdbc.driver.OracleDriver
sql.Oracle.driver.driverName:oracle

# SID of Oracle Database
sql.Oracle.driver.databaseName:isomorphic

# username and password that can create and modify tables in that database
# this user must have the following privileges for the system to function
# properly: create/alter/drop table; create/drop sequences; 
# insert/update/replace/delete rows.
sql.Oracle.driver.user:system
sql.Oracle.driver.password:manager

# -------------- SETTINGS FOR PostgreSQL --------------------

# These are example settings for use with the PostgreSQL database.
sql.PostgreSQL.database.type:postgresql

# hostname and port where the database server is installed
sql.PostgreSQL.driver.serverName:localhost
sql.PostgreSQL.driver.portNumber:5432

# Driver settings
sql.PostgreSQL.interface.type:driverManager
sql.PostgreSQL.driver:org.postgresql.Driver
sql.PostgreSQL.driver.name:Postgresql

# name of the database to use
sql.PostgreSQL.driver.databaseName:isomorphic

# username and password that can create and modify tables in that database
# this user must have the following privileges for the system to function
# properly: create/alter/drop table; create/drop sequences; 
# insert/update/replace/delete rows.
sql.PostgreSQL.driver.user:postgres
sql.PostgreSQL.driver.password:test

# -------------- SETTINGS FOR DB2 ---------------------------

# These are example settings for use with the DB2 database.
sql.DB2.database.type:db2

# hostname and port where the database server is installed
sql.DB2.driver.serverName:localhost
sql.DB2.driver.portNumber:50000

# Driver settings
sql.DB2.interface.type:dataSource
sql.DB2.driver:com.ibm.db2.jcc.DB2DataSource
sql.DB2.driver.driverType:4

# name of the database to use
sql.DB2.driver.databaseName:ISOMORPH

# username and password that can create and modify tables in that database
# this user must have the following privileges for the system to function
# properly: create/alter/drop table; create/drop sequences; 
# insert/update/replace/delete rows.
sql.DB2.driver.user:db2admin
sql.DB2.driver.password:

# -------------- SETTINGS FOR SQLServer ------ --------------

# These are example settings for use with the SQLServer database.
sql.SQLServer.database.type:sqlserver

# Driver settings
sql.SQLServer.interface.type:driverManager
sql.SQLServer.driver:com.microsoft.sqlserver.jdbc.SQLServerDriver

# SQLServer is configured via a jdbc URL params are: 
#                                          hostname :port;             dbName    ;    uid;         password
sql.SQLServer.driver.url:jdbc:sqlserver://127.0.0.1:1433;DatabaseName=isomorphic;User=sa;Password=

# Note that settings are alightly different if you are using SQL Server 2000 or earlier - 
# see http://forums.smartclient.com/showthread.php?p=11879#post11879

# -------------- SETTINGS FOR Informix ---------------------------

# These are example settings for use with the Informix database.
sql.Informix.database.type:informix

# hostname and port where the database server is installed
sql.Informix.driver.serverName:localhost
sql.Informix.driver.portNumber:1526

# Driver settings
sql.Informix.interface.type:driverManager
sql.Informix.driver:com.informix.jdbc.IfxDriver
sql.Informix.driver.driverName:informix

# name of the database to use
sql.Informix.driver.databaseName:isomorphic:INFORMIXSERVER=isomorphic

# username and password that can create and modify tables in that database
# this user must have the following privileges for the system to function
# properly: create/alter/drop table; create/drop sequences; 
# insert/update/replace/delete rows.
sql.Informix.driver.user:informix
sql.Informix.driver.password:

# -------------- SETTINGS FOR Firebird ---------------------------

# These are example settings for use with the Firebird database.
sql.Firebird.database.type:firebirdsql

# hostname and port where the database server is installed
sql.Firebird.driver.serverName:localhost
sql.Firebird.driver.portNumber:3050

# Driver settings
sql.Firebird.interface.type:driverManager
sql.Firebird.driver:org.firebirdsql.jdbc.FBDriver
sql.Firebird.driver.driverName:firebirdsql

# name of the database to use
sql.Firebird.driver.databaseName:C:\isomorphic.fdb

# username and password that can create and modify tables in that database
# this user must have the following privileges for the system to function
# properly: create/alter/drop table; create/drop sequences; 
# insert/update/replace/delete rows.
sql.Firebird.driver.user:sysdba
sql.Firebird.driver.password:

# -------------- SETTINGS FOR Intersystems Cache --------------

sql.Cache.driver.user:_SYSTEM
sql.Cache.driver.password:sys
sql.Cache.driver.databaseName:SAMPLES
sql.Cache.driver.portNumber:1972
sql.Cache.driver.serverName:localhost

# -------------- SETTINGS FOR Progress OpenEdge ---------------------------

# OpenEdge notes:
#
# - We do not recommend that you use SmartClient's facilities for importing dataSources with 
#   this database product, because we discovered during development that many things related
#   to DDL are constrained or do not work at all from the JDBC side, depending on how the 
#   Progress server is configured.  We recommend that you use ABL to create and manage tables.
#
# - In keeping with Progress/OpnEdge idiom, tables are considered to have a case-insensitive 
#   collation.  This means that generated criteria for text fields compare columns directly 
#   to filter values in generated criteria, without attempting to convert both sides to the 
#   same case.  This offers better performance than converting.  However, it does also mean 
#   that we cannot support exact, case-sensitive searches on text fields with OpenEdge

# These are example settings for use with the OpenEdge database
sql.OpenEdge.database.type:openedge

# hostname and port where the database server is installed, and the database to use
sql.OpenEdge.driver.serverName:localhost
sql.OpenEdge.driver.portNumber:3090
sql.OpenEdge.driver.databaseName:isomorphic

# Driver settings
sql.OpenEdge.driver:com.ddtek.jdbc.openedge.OpenEdgeDriver
sql.OpenEdge.interface.type:driverManager
sql.OpenEdge.driver.driverName:openedge

# name of the database to use
sql.OpenEdge.driver.databaseName:isomorphic

# username and password.  Note, OpenEdge is not primarily a SQL database, and some things that
# are typically easy to do via JDBC must be done via the proprietary ABL with OpenEdge.  This 
# specifically includes dropping tables, and some other kinds of schema change and 
# authorization
sql.OpenEdge.driver.user:isomorphic
sql.OpenEdge.driver.password:isomorphic

# Other properties
# This is the cut-off length where we will use a CLOB rather than a VARCHAR when generating 
# a CREATE TABLE statement during DataSource import.  NOTE: creating VARCHARs longer than
# 255 characters requires collaboration from the ABL side, and CLOBs add a significant 
# performance overhead.  So, as mentioned above, we do not recommend that you use SmartClient's 
# DataSource import facility with OpenEdge at all (and if you follow that recommendation, this
# setting will be unused)
# sql.OpenEdge.max.varchar.length: 10000


# -------------- SETTINGS FOR Snowflake ---------------------------
#
# Snowflake is a cloud-only database - to use it, you need to set your account identifier below
# You can use <orgId>-<userId> (recommended by Snowflake) or you can use an "account locator".
# See https://docs.snowflake.com/en/user-guide/admin-account-identifier
# Eg:
# sql.Snowflake.account.identifier: organizationId-userId
#      OR
# sql.Snowflake.account.identifier: xy12345

# MUST SET THE IDENTIFIER IN THIS LINE
sql.Snowflake.account.identifier:<orgId>-<userId>


# These are example settings for use with the Snowflake database / data warehouse platform
sql.Snowflake.database.type:snowflake

# Driver settings
sql.Snowflake.driver:net.snowflake.client.jdbc.SnowflakeDriver
sql.Snowflake.interface.type:driverManager
sql.Snowflake.driver.authenticator:snowflake

# Snowflake DriverManager driver apparently requires all settings in the URL - having these 
# as separate properties doesn't work 
#sql.Snowflake.driver.serverName: localhost
#sql.Snowflake.driver.portNumber: not applicable
#sql.Firebird.driver.databaseName: ISOMORPHIC
#sql.Snowflake.driver.user: iso
#sql.Snowflake.driver.password: Isomorph1c

# Note, unlike some other databases, you MUST specify both a "db" and a "schema".  You must also 
# specify a "warehouse" - this is a concept specific to Snowflake.  You can set a default warehouse
# for each user, in which case you don't need to specify it in the URL.  Note, a "warehouse"
# appears to be a separate AWS virtual machine that handles queries
sql.Snowflake.driver.url:jdbc:snowflake://${sql.Snowflake.account.identifier}.snowflakecomputing.com?user=iso&password=Isomorph1c&db=ISOMORPHIC&schema=PUBLIC&warehouse=ISOMORPHIC
sql.Snowflake.default.schema:PUBLIC

# Other properties
sql.snowflake.defaultTimeFormat:HH:mm:ss


# -------------- HIBERNATE SETTINGS --------------------
# Where the system looks for your Hibernate configuration
hibernate.config:$webRoot/WEB-INF/classes/hibernate.cfg.xml

# -------------- SAMPLE JNDI SETTINGS ------------------
# This is the minimal set of properties needed to define a SmartClient/SmartGWT
# database connection to a JNDI resource.  These sample properties assume an 
# Oracle JNDI resource with the name "jndiTest" - such a resource would be 
# configured similar to this in Tomcat:
#
# <Resource name="jdbc/jndiTest"
#                  auth="Container"
#                  type="javax.sql.DataSource"
#                  driverClassName="oracle.jdbc.driver.OracleDriver"
#                  url="jdbc:oracle:thin:@192.168.132.152:1521:xe"
#                  username="system"
#                  password="manager"
#                  initialSize="5"                 
#                  maxActive="50" />
#
# (Note that the java:comp/env/ prelude in this line is optional - SC/SGWT Server will
# automatically look there if it can't find the resource in the absolute location)
#sql.myOracleConnection.driver.name: java:comp/env/jdbc/jndiTest
#sql.myOracleConnection.database.type: oracle
#sql.myOracleConnection.interface.type: jndi

# -------------- LOADING APP AND DATASOURCE DEFINITIONS --------------------

# Where the system looks for DataSource definition files ([dataSourceId].ds.xml or
# [dataSourceID].ds.js).  It's useful to put all your DataSources in one 
# directory since DataSources are frequently shared between applications.  
# "project.datasources" is also where the DataSource Importer tool looks 
# for available DataSources.
project.datasources:$webRoot/shared/ds, $webRoot/examples/shared/ds, $webRoot/tools/selenium, $webRoot/tools/visualBuilder/sampleDS
project.project:$webRoot/shared/ui, $webRoot/isomorphic/system/reference/inlineExamples/ui
project.ui:$webRoot/shared/ui, $webRoot/isomorphic/system/reference/inlineExamples/ui
project.apps:$webRoot/shared/app


# -------------- SECURE APPLICATION EXAMPLE DEFINITIONS --------------------
authentication.enabled:yes

# superuserRole: If specified, user with this role will have access to all 
# dataSource operations regardless of the any requiresRole settings
#authentication.superuserRole: manager

authenticator.authExample:com.isomorphic.datasource.DataSourceAuthenticator
authenticator.authExample.datasource:user
authenticator.authExample.usernameField:username
authenticator.authExample.passwordField:password
authenticator.authExample.saltField:salt
authenticator.authExample.cookieDomain:.smartclient.com
authenticator.authExample.sessionTimeout:1800



# -------------- JMS Configuration for Real Time Messaging  --------------------
# If you comment in the properties below, the simple messaging example will work
# against Active MQ JMS instead.  Be sure to start your ActiveMQ server and double
# check the configuraition below, notably the TCP endpoint of your ActiveMQ server.
# If you make changes here, you'll also need to modify ActiveMQ's jndi.properties
# also located in WEB-INF/classes
#
# You'll also need to drop the ActiveMQ jar into WEB-INF/lib - it's typically
# named apache-activemq-4.1.1.jar or similar.
#
# For additional information, see this forum post:
# http://forums.smartclient.com/showthread.php?p=1785#post1785
#
#messaging.dispatcherImplementer: com.isomorphic.messaging.JMSMessageDispatcher
#
#jndi.messaging.java.naming.factory.initial: org.apache.activemq.jndi.ActiveMQInitialContextFactory
#jndi.messaging.java.naming.provider.url: tcp://localhost:61616
#
#messaging.jms.context: none
#messaging.jms.jndiPrefix: 
#messaging.jms.topicConnectionFactory: TopicConnectionFactory
#messaging.jms.queueConnectionFactory: QueueConnectionFactory

# -------------- Other settings --------------------
# The setting RPCManager.enabledBuiltinMethods enables or disables the BuiltInRPCs - RPC calls
# that are built into the SmartClient Server.  The setting below reflects the framework default
# of enabling only those RPCs that are typically needed in an application.
# 
# See the JavaDoc for com.isomorphic.rpc.BuiltinRPC and com.isomorphic.tools.BuiltinRPC for all
# available builtinRPCs and their behavior.
# 
# Note that many of the BuiltinRPCs are designed for use by tools such as Reify, and
# provide services such as direct access to the file system (for load and save of screens) that
# would be unsafe to expose to untrusted users.
#
#RPCManager.enabledBuiltinMethods: xmlToJS, uploadProgressCheck, exportClientData, downloadClientExport, setAttributes, getPdfObject, exportImage, messagingSend, ping, getCompactSkinNames, getSkinConfigMap

# SECURITY NOTE: DO NOT ENABLE THIS IN PRODUCTION
# The special '*' value enables all builtin RPCs. 
# Do not deploy applications with all builtin RPCs enabled. Some of these are
# development-only tools that have not been audited from a security standpoint.
RPCManager.enabledBuiltinMethods:*

# SECURITY: DO NOT ENABLE THIS IN PRODUCTION
# This datasource allows remote deletion and viewing of any file under webRoot.
# It is used by Reify to load/save views.
FilesystemDataSource.enabled:true

# When importing JSON, XML or CSV data in UTF-8 or UTF-16 format using the server-side 
# DataImport class or the end-to-end BatchUploader feature, should we automatically consume
# the Byte Order Marker (BOM) if one is present?  This flag is only provided for backwards 
# compatibility; the only good reason for switching this off would be if you have already 
# taken steps to work around the presence of a BOM in the imported data
import.consume.bom:true

# Redirect Selenium playback from the Developer Console "Recorder" tab to use another SC
# Framework.  One use is to redirect to a local installation so the browser runs locally.
#DeveloperConsole.webdriver.actionURL: http://localhost:8888/isomorphic/IDACall

# Configure the browser drivers used by Selenium with the correct filesystem paths
#system.setProperty.webdriver.gecko.driver: /usr/local/bin/geckodriver
#system.setProperty.webdriver.chrome.driver: /usr/local/bin/chromedriver
#system.setProperty.webdriver.edge.driver: /usr/local/bin/msedgedriver

# If true, pooled DataSource instances are discarded and rebuilt when the 
# underlying .ds.xml file changes.  This is a convenience intended for development
# servers only - do not switch this flag on in a production environment!  See the doc 
# article "serverDataSourceImplementation"
datasources.enableUpToDateCheck:true
# If true, pooled DataSource instances are discarded and rebuilt when the 
# underlying .ds.xml file changes, in the specific case of loading Component Schema.
# If you leave this flag unset, it will use the value of datasources.enableUpToDateCheck.
#datasources.enableUpToDateCheckForComponentSchema: true
sql.myDb.driver.networkProtocol:tcp
sql.myDb.driver.serverName:localhost
sql.myDb.interface.type:dataSource
sql.myDb.driver.user:root
sql.myDb.driver.databaseName:my_schema
sql.myDb.driver:com.mysql.jdbc.jdbc2.optional.MysqlDataSource
sql.myDb.autoJoinTransactions:true
sql.myDb.driver.portNumber:3306
sql.myDb.driver.context:
sql.myDb.database.type:mysql
sql.myDb.interface.credentialsInURL:true
sql.myDb.driver.url:
