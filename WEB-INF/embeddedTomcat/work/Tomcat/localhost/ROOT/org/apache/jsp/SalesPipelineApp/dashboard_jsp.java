/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.42
 * Generated at: 2025-06-23 14:49:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.SalesPipelineApp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class dashboard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("  <title>Dashboard Starter App</title>\r\n");
      out.write("\r\n");
      out.write("  <!-- 1) SmartClient bootstrapping -->\r\n");
      out.write("  <script>window.isomorphicDir = \"isomorphic\";</script>\r\n");
      out.write("  <script>window.isomorphic_simpleNames = false;</script>\r\n");
      out.write("\r\n");
      out.write("  <script src=\"isomorphic/system/modules/ISC_Core.js\"></script>\r\n");
      out.write("  <script src=\"isomorphic/system/modules/ISC_Foundation.js\"></script>\r\n");
      out.write("  <script src=\"isomorphic/system/modules/ISC_Containers.js\"></script>\r\n");
      out.write("  <script src=\"isomorphic/system/modules/ISC_Grids.js\"></script>\r\n");
      out.write("  <script src=\"isomorphic/system/modules/ISC_Forms.js\"></script>\r\n");
      out.write("  <script src=\"isomorphic/system/modules/ISC_DataBinding.js\"></script>\r\n");
      out.write("  <script src=\"isomorphic/system/modules/ISC_Drawing.js\"></script>\r\n");
      out.write("    <!-- after ISC_DataBinding.js and ISC_Drawing.js -->\r\n");
      out.write("    <script src=\"isomorphic/system/modules-debug/ISC_Logging.js\"></script>\r\n");
      out.write("    <script src=\"isomorphic/system/modules-debug/ISC_DebugConsole.js\"></script>\r\n");
      out.write("  \r\n");
      out.write("  <script>\r\n");
      out.write("    isc.Log.setLevel(\"DSRequest\",  \"debug\");\r\n");
      out.write("    isc.Log.setLevel(\"DataBinding\", \"debug\");\r\n");
      out.write("  </script>\r\n");
      out.write("  <!-- 2) Skin (after modules) -->\r\n");
      out.write("  <script src=\"isomorphic/skins/Shiva/load_skin.js\"></script>\r\n");
      out.write("\r\n");
      out.write("  <style>\r\n");
      out.write("    html,body{height:100%;margin:0;overflow:hidden;background:#f2f2f2;font-family:Helvetica,Arial,sans-serif}\r\n");
      out.write("    .appHeader{background:#f2f2f2;font-size:28px;font-weight:600;line-height:46px;text-align:center;color:#444}\r\n");
      out.write("    .card{border:1px solid #ccc;border-radius:8px;background:#fff;box-shadow:0 2px 6px rgba(0,0,0,.08)}\r\n");
      out.write("    .kpi-value{font-size:1.8em;margin-top:6px}.kpi-green{color:#009a32}.kpi-red{color:#c40000}\r\n");
      out.write("    .section-header{font-size:1.2em;font-weight:600;color:#444;margin:8px 0 4px}\r\n");
      out.write("    .statusWon{background:#f37000!important;color:#000!important}\r\n");
      out.write("    .statusLost{background:#d60000!important;color:#fff!important}\r\n");
      out.write("    .statusPot{background:#199f4b!important;color:#fff!important}\r\n");
      out.write("  </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<script>\r\n");
      out.write("// -------- run once all modules + DOM are ready --------\r\n");
      out.write("isc.Page.setEvent(\"load\", function () {\r\n");
      out.write("\r\n");
      out.write("  // 1) Load DataSources (XML files must live beside this JSP)\r\n");
      out.write("  isc.DataSource.load(\"pipelineDS\", function () {\r\n");
      out.write("    isc.DataSource.load(\"forecastDS\", function () {\r\n");
      out.write("      buildUI();\r\n");
      out.write("    });\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("  function buildUI () {\r\n");
      out.write("\r\n");
      out.write("    // KPI placeholder\r\n");
      out.write("    var kpiPlaceholder = isc.Canvas.create({ID:\"kpiPlaceholder\", autoDraw:false});\r\n");
      out.write("\r\n");
      out.write("    // ---------- Dashboard (forecast grid) ----------\r\n");
      out.write("    var forecastHeader = isc.Label.create({\r\n");
      out.write("      contents:\"Sales Forecast Statistics\", styleName:\"section-header\"\r\n");
      out.write("    });\r\n");
      out.write("    var forecastGrid = isc.ListGrid.create({\r\n");
      out.write("      dataSource:\"forecastDS\", autoFetchData:true,\r\n");
      out.write("      showGridSummary:true, gridSummaryFunction:\"sum\",\r\n");
      out.write("      alternateRecordStyles:true, width:\"100%\",\r\n");
      out.write("      fields:[\r\n");
      out.write("        {name:\"month\", width:60},\r\n");
      out.write("        {name:\"salesperson\", title:\"Sales Rep\"},\r\n");
      out.write("        {name:\"target\",  formatCellValue:v=>isc.NumberUtil.format(v,\"$#,##0\")},\r\n");
      out.write("        {name:\"actual\",  formatCellValue:v=>isc.NumberUtil.format(v,\"$#,##0\")}\r\n");
      out.write("      ]\r\n");
      out.write("    });\r\n");
      out.write("    var dashboardPane = isc.VLayout.create({\r\n");
      out.write("      width:\"100%\", height:\"100%\",\r\n");
      out.write("      layoutMargin:12, membersMargin:10,\r\n");
      out.write("      members:[kpiPlaceholder, forecastHeader, forecastGrid]\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // ---------- Pipeline (filter + grid) ----------\r\n");
      out.write("    var pGrid = isc.ListGrid.create({\r\n");
      out.write("      dataSource:\"pipelineDS\", autoFetchData:true,\r\n");
      out.write("      alternateRecordStyles:true, width:\"100%\", height:\"*\",\r\n");
      out.write("      cellStyleGenerator:(rec,row,col)=>{\r\n");
      out.write("        if(pGrid.getFieldName(col)!==\"status\") return null;\r\n");
      out.write("        return rec.status===\"Won\" ? \"statusWon\"\r\n");
      out.write("             : rec.status===\"Lost\" ? \"statusLost\" : \"statusPot\";\r\n");
      out.write("      },\r\n");
      out.write("      fields:[\r\n");
      out.write("        {name:\"date\", formatCellValue:v=>isc.DateUtil.format(v,\"MM/dd/yyyy\")},\r\n");
      out.write("        {name:\"customer\"},\r\n");
      out.write("        {name:\"comments\"},\r\n");
      out.write("        {name:\"chance\", formatCellValue:v=>isc.NumberUtil.format(v,\"##0.00'%'\")},\r\n");
      out.write("        {name:\"status\"},\r\n");
      out.write("        {name:\"salesperson\", title:\"Salesperson\"},\r\n");
      out.write("        {name:\"value\", title:\"Potential Value\",\r\n");
      out.write("          formatCellValue:v=>isc.NumberUtil.format(v,\"$#,##0.00\")}\r\n");
      out.write("      ]\r\n");
      out.write("    });\r\n");
      out.write("    var filterForm = isc.DynamicForm.create({\r\n");
      out.write("      numCols:8, cellPadding:2, width:\"100%\",\r\n");
      out.write("      fields:[{\r\n");
      out.write("        name:\"view\", type:\"radioGroup\", vertical:false, defaultValue:\"all\",\r\n");
      out.write("        valueMap:{all:\"All\", won:\"Won\", lost:\"Lost\", potential:\"Potential\"},\r\n");
      out.write("        changed(form,item,val){\r\n");
      out.write("          var crit=null;\r\n");
      out.write("          if(val===\"won\")       crit={status:\"Won\"};\r\n");
      out.write("          else if(val===\"lost\") crit={status:\"Lost\"};\r\n");
      out.write("          else if(val===\"potential\")\r\n");
      out.write("                               crit={status:[\"Bidding\",\"On Hold\",\"Delayed\"]};\r\n");
      out.write("          pGrid.setCriteria(crit); pGrid.fetchData();\r\n");
      out.write("        }\r\n");
      out.write("      }]\r\n");
      out.write("    });\r\n");
      out.write("    var pipelinePane = isc.VLayout.create({\r\n");
      out.write("      width:\"100%\", height:\"100%\",\r\n");
      out.write("      layoutMargin:12, membersMargin:10,\r\n");
      out.write("      members:[filterForm, pGrid]\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // ---------- Navigation ----------\r\n");
      out.write("    var navTree = isc.Tree.create({\r\n");
      out.write("      modelType:\"children\",\r\n");
      out.write("      root:{children:[{id:\"dashboard\",title:\"Dashboard\"},{id:\"pipeline\",title:\"Pipeline\"}]}\r\n");
      out.write("    });\r\n");
      out.write("    var nav = isc.TreeGrid.create({\r\n");
      out.write("      width:180, showHeader:false, data:navTree, animateFolders:false,\r\n");
      out.write("      nodeClick(node){tabSet.selectTab(node.id===\"dashboard\"?0:1);}\r\n");
      out.write("    });\r\n");
      out.write("    var tabSet = isc.TabSet.create({\r\n");
      out.write("      width:\"100%\", height:\"100%\",\r\n");
      out.write("      tabs:[\r\n");
      out.write("        {title:\"Dashboard\", pane:dashboardPane},\r\n");
      out.write("        {title:\"Pipeline\",  pane:pipelinePane}\r\n");
      out.write("      ]\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    isc.VLayout.create({\r\n");
      out.write("      width:\"100%\", height:\"100%\",\r\n");
      out.write("      members:[\r\n");
      out.write("        isc.HLayout.create({\r\n");
      out.write("          height:50, styleName:\"appHeader\",\r\n");
      out.write("          members:[\r\n");
      out.write("            isc.Img.create({src:\"logo.png\",width:36,height:36,layoutAlign:\"center\"}),\r\n");
      out.write("            isc.LayoutSpacer.create({width:\"*\"}),\r\n");
      out.write("            isc.Label.create({contents:\"Dashboard Starter App\",styleName:\"appHeader\"}),\r\n");
      out.write("            isc.LayoutSpacer.create({width:\"*\"})\r\n");
      out.write("          ]\r\n");
      out.write("        }),\r\n");
      out.write("        isc.HLayout.create({width:\"100%\", height:\"*\", members:[nav, tabSet]})\r\n");
      out.write("      ]\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // ---------- compute KPI row ----------\r\n");
      out.write("    isc.DataSource.get(\"pipelineDS\").fetchData({}, function (resp) {\r\n");
      out.write("      var total=0, won=0, lost=0;\r\n");
      out.write("      resp.data.forEach(r=>{\r\n");
      out.write("        total+=r.value;\r\n");
      out.write("        if(r.status===\"Won\")  won += r.value;\r\n");
      out.write("        if(r.status===\"Lost\") lost+= r.value;\r\n");
      out.write("      });\r\n");
      out.write("      var fmt=v=>isc.NumberUtil.format(v,\"$#,##0.00\");\r\n");
      out.write("      var cards=[\r\n");
      out.write("        {t:\"Pipeline Potential\", v:fmt(total)},\r\n");
      out.write("        {t:\"Orders Won\",        v:fmt(won),  cls:\"kpi-green\"},\r\n");
      out.write("        {t:\"Orders Lost\",       v:fmt(lost), cls:\"kpi-red\"}\r\n");
      out.write("      ].map(k=>isc.Canvas.create({\r\n");
      out.write("            width:\"*\", styleName:\"card\", padding:10,\r\n");
      out.write("            contents:`<div style=\"font-weight:600;font-size:1.1em\">${k.t}</div>\r\n");
      out.write("                      <div class=\"kpi-value ${k.cls||''}\">${k.v}</div>`\r\n");
      out.write("      }));\r\n");
      out.write("      dashboardPane.replaceMember(0,\r\n");
      out.write("        isc.HLayout.create({width:\"100%\", height:110, membersMargin:15, members:cards})\r\n");
      out.write("      );\r\n");
      out.write("    });\r\n");
      out.write("  }\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
