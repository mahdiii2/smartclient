/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.42
 * Generated at: 2025-06-18 22:39:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.examples.demoApp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class demoAppXML_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/examples/demoApp/demoAppXML.xml", Long.valueOf(1750169550671L));
    _jspx_dependants.put("/WEB-INF/lib/isomorphic_core_rpc.jar", Long.valueOf(1750169604742L));
    _jspx_dependants.put("jar:file:/C:/Users/User/Downloads/SmartClient_v141p_2025-06-14_Evaluation/SmartClient_v141p_2025-06-14_Evaluation/smartclientSDK/WEB-INF/lib/isomorphic_core_rpc.jar!/META-INF/isc.tld", Long.valueOf(1749892736000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fisomorphic_005floadISC_0026_005fskin_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fisomorphic_005floadDS_0026_005fname_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fisomorphic_005fXML;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fisomorphic_005floadISC_0026_005fskin_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fisomorphic_005floadDS_0026_005fname_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fisomorphic_005fXML = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fisomorphic_005floadISC_0026_005fskin_005fnobody.release();
    _005fjspx_005ftagPool_005fisomorphic_005floadDS_0026_005fname_005fnobody.release();
    _005fjspx_005ftagPool_005fisomorphic_005fXML.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!--------------------------------------------------------------------\n");
      out.write("	SmartClient SDK\n");
      out.write("	Demo Application (JS code) + resizeBars\n");
      out.write("\n");
      out.write("	Copyright 2005 Isomorphic Software, Inc. (www.isomorphic.com)\n");
      out.write("---------------------------------------------------------------------->\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<HTML><HEAD><TITLE>SmartClient Demo Application</TITLE>\n");
      out.write("<!--  -->\n");
      if (_jspx_meth_isomorphic_005floadISC_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("</HEAD><BODY CLASS=\"pageBackground\" STYLE=\"overflow:hidden\">\n");
      out.write("\n");
      out.write("<SCRIPT>\n");
      out.write("isc.setAutoDraw(false);\n");
      out.write("\n");
      out.write("// Load DataSources\n");
      out.write("// ---------------------------------------------------------------------\n");
      out.write("\n");
      if (_jspx_meth_isomorphic_005floadDS_005f0(_jspx_page_context))
        return;
      out.write('\n');
      if (_jspx_meth_isomorphic_005floadDS_005f1(_jspx_page_context))
        return;
      out.write("\n");
      out.write("\n");
      out.write("// Set up the app img dir so we pick up the example's images\n");
      out.write("isc.Page.setAppImgDir(isc.Page.getIsomorphicDocsDir()+\"exampleImages/\");\n");
      out.write("\n");
      out.write("// Pick up application UI and logic from the .xml UI file\n");
      out.write("// ---------------------------------------------------------------------\n");
      if (_jspx_meth_isomorphic_005fXML_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</SCRIPT>\n");
      out.write("</BODY>\n");
      out.write("</HTML>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_isomorphic_005floadISC_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  isomorphic:loadISC
    com.isomorphic.taglib.LoadISCTag _jspx_th_isomorphic_005floadISC_005f0 = (com.isomorphic.taglib.LoadISCTag) _005fjspx_005ftagPool_005fisomorphic_005floadISC_0026_005fskin_005fnobody.get(com.isomorphic.taglib.LoadISCTag.class);
    _jspx_th_isomorphic_005floadISC_005f0.setPageContext(_jspx_page_context);
    _jspx_th_isomorphic_005floadISC_005f0.setParent(null);
    // /examples/demoApp/demoAppXML.jsp(12,0) name = skin type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_isomorphic_005floadISC_005f0.setSkin("BlackOps");
    int _jspx_eval_isomorphic_005floadISC_005f0 = _jspx_th_isomorphic_005floadISC_005f0.doStartTag();
    if (_jspx_th_isomorphic_005floadISC_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fisomorphic_005floadISC_0026_005fskin_005fnobody.reuse(_jspx_th_isomorphic_005floadISC_005f0);
    return false;
  }

  private boolean _jspx_meth_isomorphic_005floadDS_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  isomorphic:loadDS
    com.isomorphic.taglib.LoadDSTag _jspx_th_isomorphic_005floadDS_005f0 = (com.isomorphic.taglib.LoadDSTag) _005fjspx_005ftagPool_005fisomorphic_005floadDS_0026_005fname_005fnobody.get(com.isomorphic.taglib.LoadDSTag.class);
    _jspx_th_isomorphic_005floadDS_005f0.setPageContext(_jspx_page_context);
    _jspx_th_isomorphic_005floadDS_005f0.setParent(null);
    // /examples/demoApp/demoAppXML.jsp(21,0) name = name type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_isomorphic_005floadDS_005f0.setName("supplyItem");
    int _jspx_eval_isomorphic_005floadDS_005f0 = _jspx_th_isomorphic_005floadDS_005f0.doStartTag();
    if (_jspx_th_isomorphic_005floadDS_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fisomorphic_005floadDS_0026_005fname_005fnobody.reuse(_jspx_th_isomorphic_005floadDS_005f0);
    return false;
  }

  private boolean _jspx_meth_isomorphic_005floadDS_005f1(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  isomorphic:loadDS
    com.isomorphic.taglib.LoadDSTag _jspx_th_isomorphic_005floadDS_005f1 = (com.isomorphic.taglib.LoadDSTag) _005fjspx_005ftagPool_005fisomorphic_005floadDS_0026_005fname_005fnobody.get(com.isomorphic.taglib.LoadDSTag.class);
    _jspx_th_isomorphic_005floadDS_005f1.setPageContext(_jspx_page_context);
    _jspx_th_isomorphic_005floadDS_005f1.setParent(null);
    // /examples/demoApp/demoAppXML.jsp(22,0) name = name type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_isomorphic_005floadDS_005f1.setName("supplyCategory");
    int _jspx_eval_isomorphic_005floadDS_005f1 = _jspx_th_isomorphic_005floadDS_005f1.doStartTag();
    if (_jspx_th_isomorphic_005floadDS_005f1.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fisomorphic_005floadDS_0026_005fname_005fnobody.reuse(_jspx_th_isomorphic_005floadDS_005f1);
    return false;
  }

  private boolean _jspx_meth_isomorphic_005fXML_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    jakarta.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  isomorphic:XML
    com.isomorphic.taglib.WidgetXMLTag _jspx_th_isomorphic_005fXML_005f0 = (com.isomorphic.taglib.WidgetXMLTag) _005fjspx_005ftagPool_005fisomorphic_005fXML.get(com.isomorphic.taglib.WidgetXMLTag.class);
    _jspx_th_isomorphic_005fXML_005f0.setPageContext(_jspx_page_context);
    _jspx_th_isomorphic_005fXML_005f0.setParent(null);
    int _jspx_eval_isomorphic_005fXML_005f0 = _jspx_th_isomorphic_005fXML_005f0.doStartTag();
    if (_jspx_eval_isomorphic_005fXML_005f0 != jakarta.servlet.jsp.tagext.Tag.SKIP_BODY) {
      if (_jspx_eval_isomorphic_005fXML_005f0 != jakarta.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
        out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_isomorphic_005fXML_005f0);
      }
      do {
        out.write('\n');
        out.write("\n");
        out.write("<!-- \n");
        out.write("User Interface \n");
        out.write("=======================================================================================\n");
        out.write("-->\n");
        out.write("\n");
        out.write("<TreeGrid\n");
        out.write("	ID=\"categoryTree\"\n");
        out.write("	dataSource=\"supplyCategory\"\n");
        out.write("	nodeClick=\"findForm.findItems(node.categoryName)\"\n");
        out.write("    showHeader=\"false\"\n");
        out.write("    leaveScrollbarGap=\"false\"\n");
        out.write("	canAcceptDroppedRecords=\"true\"\n");
        out.write("    canReparentNodes=\"false\"\n");
        out.write("    selectionType=\"single\"\n");
        out.write("    animateFolders=\"true\"\n");
        out.write("    animateRowsMaxTime=\"750\"\n");
        out.write(">\n");
        out.write("    \n");
        out.write("</TreeGrid>\n");
        out.write("\n");
        out.write("<HTMLPane\n");
        out.write("	ID=\"helpCanvas\"\n");
        out.write("	overflow=\"auto\"\n");
        out.write("    styleName=\"defaultBorder\"\n");
        out.write("	padding=\"10\">\n");
        out.write("    <contentsURL>\n");
        out.write("        <JS>isc.Page.getIsomorphicDocsDir() + \"/inlineExamples/demoApp/demoApp_helpText.html\"</JS>\n");
        out.write("    </contentsURL>\n");
        out.write("</HTMLPane>\n");
        out.write("\n");
        out.write("<IButton\n");
        out.write("	ID=\"findButton\"\n");
        out.write("	title=\"Find\"\n");
        out.write("	left=\"25\"\n");
        out.write("	top=\"16\"\n");
        out.write("	width=\"80\"\n");
        out.write("	icon=\"[SAMPLE]demoApp/icon_find.png\"\n");
        out.write("	iconWidth=\"24\">\n");
        out.write("	<click>\n");
        out.write("        <Action target=\"findForm\" name=\"findItems\"/>\n");
        out.write("	</click>\n");
        out.write("</IButton>\n");
        out.write("\n");
        out.write("\n");
        out.write("<SearchForm\n");
        out.write("	ID=\"findForm\"\n");
        out.write("	dataSource=\"supplyItem\"\n");
        out.write("	left=\"130\"\n");
        out.write("    top=\"10\"\n");
        out.write("	cellPadding=\"4\"\n");
        out.write("	numCols=\"6\"\n");
        out.write(">\n");
        out.write("	<fields>\n");
        out.write("		<field name=\"SKU\"/>\n");
        out.write("		<field name=\"itemName\" editorType=\"ComboBoxItem\" optionDataSource=\"supplyItem\" pickListWidth=\"250\"/>\n");
        out.write("		<field name=\"findInCategory\" editorType=\"CheckboxItem\"\n");
        out.write("			title=\"Use category\" defaultValue=\"true\" shouldSaveValue=\"false\"/>\n");
        out.write("	</fields>\n");
        out.write("    <findItems><JS>\n");
        out.write("        function (categoryName) {\n");
        out.write("            var findValues;\n");
        out.write("            \n");
        out.write("            if (this.getValue('findInCategory') &amp;&amp; categoryTree.selection.anySelected()) {\n");
        out.write("        		// use tree category and form values\n");
        out.write("        		if (categoryName == null) categoryName = categoryTree.getSelectedRecord().categoryName;\n");
        out.write("        		findValues = {category:categoryName};\n");
        out.write("        		isc.addProperties(findValues, this.getValues());\n");
        out.write("        		\n");
        out.write("        	} else if (categoryName == null) {\n");
        out.write("        		// use form values only\n");
        out.write("        		findValues = this.getValues();\n");
        out.write("        		\n");
        out.write("        	} else {\n");
        out.write("        		// use tree category only\n");
        out.write("        		findValues = {category:categoryName};\n");
        out.write("        	}\n");
        out.write("        	\n");
        out.write("        	itemList.filterData(findValues);\n");
        out.write("        	\n");
        out.write("        	itemDetailTabs.clearDetails();\n");
        out.write("        }\n");
        out.write("    </JS></findItems>\n");
        out.write("</SearchForm>\n");
        out.write("\n");
        out.write("\n");
        out.write("<ListGrid\n");
        out.write("	ID=\"itemList\"\n");
        out.write("	dataSource=\"supplyItem\"\n");
        out.write("	useAllDataSourceFields=\"true\"\n");
        out.write("	recordClick=\"this.updateDetails()\"\n");
        out.write("	canEdit=\"true\"\n");
        out.write("    modalEditing=\"true\"\n");
        out.write("	cellChanged=\"this.updateDetails()\"\n");
        out.write("	alternateRecordStyles=\"true\"\n");
        out.write("	canDragRecordsOut=\"true\"\n");
        out.write("	hoverWidth=\"200\"\n");
        out.write("	hoverHeight=\"20\"\n");
        out.write("	cellContextClick=\"return itemListMenu.showContextMenu()\"\n");
        out.write("	selectionType=\"single\"\n");
        out.write(">\n");
        out.write("	<fields>\n");
        out.write("        <field name=\"itemName\" title=\"Name\" showHover=\"true\"/>\n");
        out.write("		<field name=\"unitCost\" autoFitWidthApproach=\"both\" autoFitWidth=\"true\"\n");
        out.write("               format=\"Â¤,0.00\" editorType=\"SpinnerItem\">\n");
        out.write("			<editorProperties step=\"0.01\"/>\n");
        out.write("		</field>\n");
        out.write("		<field name=\"SKU\" canEdit=\"false\" autoFitWidthApproach=\"value\" autoFitWidth=\"true\"/>\n");
        out.write("		<field name=\"description\" showHover=\"true\"/>\n");
        out.write("		<field name=\"category\" canEdit=\"false\" autoFitWidthApproach=\"value\" autoFitWidth=\"true\"/>\n");
        out.write("		<field name=\"units\" canEdit=\"false\" autoFitWidthApproach=\"both\" autoFitWidth=\"true\"/>\n");
        out.write("		<field name=\"inStock\" width=\"55\" align=\"center\"/>\n");
        out.write("		<field name=\"nextShipment\" showIf=\"false\"/>\n");
        out.write("	</fields>\n");
        out.write("    \n");
        out.write("    <!-- Function to update details based on selection -->\n");
        out.write("    <updateDetails><JS>\n");
        out.write("        function () {\n");
        out.write("        \n");
        out.write("            var record = itemList.getSelectedRecord();\n");
        out.write("            if (record == null) return itemDetailTabs.clearDetails();\n");
        out.write("            \n");
        out.write("            if (itemDetailTabs.getSelectedTabNumber() == 0) {\n");
        out.write("                // View tab: show selected record\n");
        out.write("                itemViewer.setData(record) \n");
        out.write("            } else {\n");
        out.write("                // Edit tab: edit selected record\n");
        out.write("                itemDetailTabs.updateTab(\"editTab\", editForm);\n");
        out.write("                editForm.editRecord(record);\n");
        out.write("            }\n");
        out.write("        }\n");
        out.write("    </JS></updateDetails>\n");
        out.write("\n");
        out.write("</ListGrid>\n");
        out.write("\n");
        out.write("\n");
        out.write("<Menu \n");
        out.write("	ID=\"itemListMenu\"\n");
        out.write(">\n");
        out.write("	<data>\n");
        out.write("        <item title=\"Add New Item\" icon=\"[SAMPLE]demoApp/icon_add.png\">\n");
        out.write("            <click>\n");
        out.write("                itemList.selection.deselectAll();\n");
        out.write("                itemDetailTabs.selectTab(1);\n");
        out.write("                itemList.updateDetails();\n");
        out.write("            </click>\n");
        out.write("        </item>\n");
        out.write("        <item isSeparator=\"true\"/>\n");
        out.write("		<item title=\"Show Details\" icon=\"[SAMPLE]demoApp/icon_view.png\"\n");
        out.write("		      click=\"itemDetailTabs.selectTab(0); itemList.updateDetails()\"/>\n");
        out.write("		<item title=\"Edit Item\" icon=\"[SAMPLE]demoApp/icon_edit.png\"\n");
        out.write("		      click=\"itemDetailTabs.selectTab(1); itemList.updateDetails()\"/>\n");
        out.write("		<item title=\"Delete Item\" icon=\"[SAMPLE]demoApp/icon_delete.png\"\n");
        out.write("		      click=\"itemList.removeSelectedData(); itemDetailTabs.clearDetails()\"/>\n");
        out.write("	</data>\n");
        out.write("</Menu>\n");
        out.write("\n");
        out.write("\n");
        out.write("<DetailViewer\n");
        out.write("	ID=\"itemViewer\"\n");
        out.write("	dataSource=\"supplyItem\"\n");
        out.write("	width=\"100%\"\n");
        out.write("	margin=\"5\"\n");
        out.write("    emptyMessage=\"Select an item to view its details\"\n");
        out.write("/>\n");
        out.write("\n");
        out.write("<DynamicForm\n");
        out.write("	ID=\"editForm\"\n");
        out.write("	dataSource=\"supplyItem\"\n");
        out.write("	useAllDataSourceFields=\"true\"\n");
        out.write("	width=\"650\"\n");
        out.write("	numCols=\"4\"\n");
        out.write("    margin=\"5\"\n");
        out.write("    cellPadding=\"5\"\n");
        out.write("	autoFocus=\"false\"\n");
        out.write(">\n");
        out.write("	<colWidths>\n");
        out.write("		<colWidth>80</colWidth>\n");
        out.write("		<colWidth>200</colWidth>\n");
        out.write("		<colWidth>100</colWidth>\n");
        out.write("		<colWidth>200</colWidth>\n");
        out.write("	</colWidths>\n");
        out.write("	<fields>\n");
        out.write("		<field name=\"SKU\"/>\n");
        out.write("		<field name=\"description\" rowSpan=\"3\" width=\"200\"/>\n");
        out.write("		<field name=\"category\" editorType=\"PickTreeItem\" dataSource=\"supplyCategory\"\n");
        out.write("		 emptyMenuMessage=\"No Sub Categories\" canSelectParentItems=\"true\"/>\n");
        out.write("		<field name=\"unitCost\" editorType=\"SpinnerItem\" step=\"0.01\"/>\n");
        out.write("		<field name=\"inStock\"/>\n");
        out.write("		<field name=\"nextShipment\" useTextField=\"true\" wrapTitle=\"false\"/>\n");
        out.write("		<field name=\"savebtn\" editorType=\"ButtonItem\" align=\"center\" \n");
        out.write("			width=\"100\" colSpan=\"4\" title=\"Save Item\" click=\"editForm.saveData()\"/>\n");
        out.write("	</fields>\n");
        out.write("</DynamicForm>\n");
        out.write("\n");
        out.write("\n");
        out.write("<Label\n");
        out.write("    ID=\"editorMessage\"\n");
        out.write("    autoDraw=\"false\"\n");
        out.write("    width=\"100%\"\n");
        out.write("    height=\"100%\"\n");
        out.write("    align=\"center\"\n");
        out.write("    contents=\"Select a record to edit, or a category to insert a new record into\"\n");
        out.write("/>\n");
        out.write("\n");
        out.write("<TabSet\n");
        out.write("	ID=\"itemDetailTabs\"\n");
        out.write("    tabSelected=\"itemList.updateDetails()\"\n");
        out.write(">    \n");
        out.write("	<tabs>\n");
        out.write("		<tab title=\"View\" pane=\"itemViewer\" ID=\"viewTab\" width=\"70\" icon=\"[SAMPLE]demoApp/icon_view.png\"/>\n");
        out.write("		<tab title=\"Edit\" pane=\"editForm\" ID=\"editTab\" width=\"70\" icon=\"[SAMPLE]demoApp/icon_edit.png\"/>\n");
        out.write("	</tabs>\n");
        out.write("    <clearDetails><JS>\n");
        out.write("        function () {\n");
        out.write("            var selectedTab = itemDetailTabs.getSelectedTabNumber();\n");
        out.write("            if (selectedTab == 0) {\n");
        out.write("                // View tab: show empty message\n");
        out.write("            	itemViewer.setData();\n");
        out.write("            } else if (selectedTab == 1) {\n");
        out.write("                // Edit tab: show new record editor, or empty message\n");
        out.write("                if (categoryTree.getSelectedRecord() != null) {\n");
        out.write("                    itemDetailTabs.updateTab(\"editTab\", editForm);\n");
        out.write("                    editForm.editNewRecord({category:categoryTree.getSelectedRecord().categoryName});\n");
        out.write("                } else {\n");
        out.write("                    itemDetailTabs.updateTab(\"editTab\", editorMessage);\n");
        out.write("                }\n");
        out.write("            }\n");
        out.write("        }\n");
        out.write("    </JS></clearDetails>\n");
        out.write("\n");
        out.write("</TabSet>\n");
        out.write("\n");
        out.write("<!--\n");
        out.write("Define application layout\n");
        out.write("====================================================================\n");
        out.write("-->\n");
        out.write("\n");
        out.write("<HLayout\n");
        out.write("	ID=\"pageLayout\"\n");
        out.write("	width=\"100%\"\n");
        out.write("	height=\"100%\"\n");
        out.write(">\n");
        out.write("\n");
        out.write("	<members>\n");
        out.write("		<SectionStack ID=\"leftSideLayout\" width=\"280\" \n");
        out.write("                      showResizeBar=\"true\" visibilityMode=\"multiple\"\n");
        out.write("                      animateSections=\"true\"\n");
        out.write("        >\n");
        out.write("			<sections>\n");
        out.write("                <SectionStackSection title=\"Office Supply Categories\" autoShow=\"true\">\n");
        out.write("                    <items><Canvas ref=\"categoryTree\"/></items>\n");
        out.write("                </SectionStackSection>\n");
        out.write("                <SectionStackSection title=\"Instructions\" autoShow=\"true\">\n");
        out.write("                    <items><Canvas ref=\"helpCanvas\"/></items>\n");
        out.write("                </SectionStackSection>\n");
        out.write("			</sections>\n");
        out.write("		</SectionStack>\n");
        out.write("		<SectionStack ID=\"rightSideLayout\" visibilityMode=\"multiple\"\n");
        out.write("                      animateSections=\"true\"\n");
        out.write("        >\n");
        out.write("			<sections>\n");
        out.write("                <SectionStackSection title=\"Find Items\" autoShow=\"true\">\n");
        out.write("                    <items>\n");
        out.write("                        <Canvas ID=\"findPane\" height=\"60\" overflow=\"auto\"\n");
        out.write("                                styleName=\"defaultBorder\">\n");
        out.write("                            <children>\n");
        out.write("                                <Canvas ref=\"findForm\"/>\n");
        out.write("                                <Canvas ref=\"findButton\"/>\n");
        out.write("                            </children>\n");
        out.write("                        </Canvas>\n");
        out.write("                    </items>\n");
        out.write("                </SectionStackSection>\n");
        out.write("                <SectionStackSection title=\"Office Supply Items\" autoShow=\"true\">\n");
        out.write("                    <items><Canvas ref=\"itemList\"/></items>\n");
        out.write("                </SectionStackSection>\n");
        out.write("                <SectionStackSection title=\"Item Details\" autoShow=\"true\">\n");
        out.write("                    <items><Canvas ref=\"itemDetailTabs\"/></items>\n");
        out.write("                </SectionStackSection>\n");
        out.write("			</sections>\n");
        out.write("		</SectionStack>\n");
        out.write("	</members>\n");
        out.write("</HLayout>\n");
        out.write("\n");
        out.write("isc.Page.setEvent(\"load\", \"pageLayout.draw()\");\n");
        out.write("\n");
        out.write("<!-- \n");
        out.write("Custom logic: \n");
        out.write("When showing options in the combo-box, only show the options from the selected category\n");
        out.write("if appropriate\n");
        out.write("-->\n");
        out.write("<JS>\n");
        out.write("findForm.getItem(\"itemName\").addProperties({\n");
        out.write("    getPickListFilterCriteria : function () {\n");
        out.write("        var criteria = this.Super(\"getPickListFilterCriteria\", arguments);\n");
        out.write("        if (this.form.getValue('findInCategory') &amp;&amp; categoryTree.selection.anySelected()) {\n");
        out.write("            criteria.category = categoryTree.getSelectedRecord().categoryName;\n");
        out.write("        }\n");
        out.write("        return criteria\n");
        out.write("     }\n");
        out.write("});\n");
        out.write("\n");
        out.write("<!--\n");
        out.write("Call fetchData() on the tree to load the initially visible categories\n");
        out.write("=====================================================================\n");
        out.write("-->\n");
        out.write("categoryTree.fetchData();\n");
        out.write("</JS>\n");
        out.write('\n');
        int evalDoAfterBody = _jspx_th_isomorphic_005fXML_005f0.doAfterBody();
        if (evalDoAfterBody != jakarta.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
      if (_jspx_eval_isomorphic_005fXML_005f0 != jakarta.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
        out = _jspx_page_context.popBody();
      }
    }
    if (_jspx_th_isomorphic_005fXML_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fisomorphic_005fXML.reuse(_jspx_th_isomorphic_005fXML_005f0);
    return false;
  }
}
